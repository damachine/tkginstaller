#!/usr/bin/env bash

#
# üê∏ TKG Installer ‚Äì Optimized
#
#

set -euo pipefail

# üìå Paths and Lockfile
LOCKFILE="/tmp/tkg_installer.lock"
SCRIPT_DIR="$(dirname "$(realpath "$0")")"
TEMP_DIR="$SCRIPT_DIR/temp"

# üé® Colors
[ -e "$SCRIPT_DIR/.config/colors/colors" ] && source "$SCRIPT_DIR/.config/colors/colors"

# üîí Prevent double execution
if [[ -f $LOCKFILE ]]; then
    echo -e "${RED}${BOLD}‚ùå Script is already running. Exiting...${RESET}"
    exit 1
fi
touch "$LOCKFILE"

# üßπ Cleanup on abort or exit
_on_exit() {
    local code=$?
    rm -f "$LOCKFILE"
    [[ $code -ne 0 ]] && echo -e "${BREAK}${RED}${BOLD} üéØ Script aborted üéØ${RESET}"
    #if pacman -Qq ccache &>/dev/null; then
    #    yay -Rns ccache --noconfirm
    #fi
    rm -rf /tmp/check_tkg "$TEMP_DIR" /tmp/linux-tkg /tmp/makepkg 2>/dev/null || true
    echo -e "${GREEN} üßπ Cleanup completed.${RESET}"
    exit $code
}
trap _on_exit INT TERM EXIT HUP

# üßπ Delete temp directories
_clean_tmp() {
    echo -e "${GREEN} üßπ Cleaning temporary files ...${RESET}"
    #if pacman -Qq ccache &>/dev/null; then
    #    yay -Rns ccache --noconfirm
    #fi
    sudo rm -rf /tmp/linux-tkg /tmp/makepkg 2>/dev/null || true
}

# üßº Preparation
_pre() {
    for cmd in fzf yay gcc git nano paccache bleachbit fastfetch onefetch; do
        if ! command -v "$cmd" >/dev/null; then
            echo -e "${RED}${BOLD} ‚ùå $cmd is not installed! Please install it first.${RESET}"
            return 1
        fi
    done

    fastfetch
    echo -e "${BLUE} üîÅ Starting üê∏ TKG Installer...${RESET}"
    echo -e "${BLUE} üîç Updating Arch Linux first...${RESET}"
    yay -Syu
    sudo paccache -rk0
    sudo bleachbit --clean system.localizations || true
    rm -rf "$TEMP_DIR" 2>/dev/null || true
    mkdir -p "$TEMP_DIR"
}

# üì¶ Installation functions
_linux_install() {
    cd "$TEMP_DIR"
    git clone https://github.com/Frogging-Family/linux-tkg.git || { echo "${RED}${BOLD} ‚ùå Error cloning: linux-tkg${RESET}"; return 1; }
    cd linux-tkg
    onefetch --no-color-palette --no-art || true
    makepkg -si
}

_nvidia_install() {
    cd "$TEMP_DIR"
    git clone https://github.com/Frogging-Family/nvidia-all.git || { echo "${RED}${BOLD} ‚ùå Error cloning: nvidia-all${RESET}"; return 1; }
    cd nvidia-all
    onefetch --no-color-palette --no-art || true
    makepkg -si
}

_mesa_install() {
    cd "$TEMP_DIR"
    git clone https://github.com/Frogging-Family/mesa-git.git || { echo "${RED}${BOLD} ‚ùå Error cloning: mesa-git${RESET}"; return 1; }
    cd mesa-git
    onefetch --no-color-palette --no-art || true
    makepkg -si
}

_wine_install() {
    cd "$TEMP_DIR"
    git clone https://github.com/Frogging-Family/wine-tkg-git.git || { echo "${RED}${BOLD} ‚ùå Error cloning: wine-tkg-git${RESET}"; return 1; }
    cd wine-tkg-git/wine-tkg-git
    onefetch --no-color-palette --no-art || true
    makepkg -si
    sudo setcap cap_sys_nice+ep /opt/wine-tkg-git-opt/bin/wineserver
}

_proton_install() {
    yay -S ccache --noconfirm
    cd "$TEMP_DIR"
    git clone https://github.com/Frogging-Family/wine-tkg-git.git || { echo "${RED}${BOLD} ‚ùå Error cloning: wine-tkg-git${RESET}"; return 1; }
    cd wine-tkg-git/proton-tkg
    onefetch --no-color-palette --no-art || true
    ./proton-tkg.sh
    ./proton-tkg.sh clean
    if pacman -Qq ccache &>/dev/null; then
        yay -Rns ccache --noconfirm
    fi
}

# üîß Configuration editor
_config_edit() {
    while true; do
        local config_choice
        mkdir -p ~/.config/frogminer
        
        config_choice=$(
            printf "%b\n" \
                "linux-tkg      |üß† Linux-TKG Configuration" \
                "nvidia-all     |üéÆ Nvidia-TKG Configuration" \
                "mesa-git       |üß© Mesa-TKG Configuration" \
                "wine-tkg       |üç∑ Wine-TKG Configuration" \
                "back           |‚¨ÖÔ∏è Back to Main Menu" \
                | fzf --prompt="‚ùØ Select config file: " \
                      --header="‚öôÔ∏è TKG Configuration Editor" \
                      --height="15" \
                      --border \
                      --ansi \
                      --delimiter="|" \
                      --with-nth="2"
        )
        
        if [[ -z "$config_choice" ]]; then
            echo -e "${RED}${BOLD}‚ùå Selection cancelled.${RESET}"
            return 1
        fi
        
        local config_file=$(echo "$config_choice" | cut -d"|" -f1 | xargs)
        
        case $config_file in
            linux-tkg)  
                echo -e "${BLUE}üîß Opening Linux-TKG configuration...${RESET}"
                nano ~/.config/frogminer/linux-tkg.cfg
                echo -e "${GREEN}‚úÖ Configuration saved!${RESET}"
                sleep 1
                ;;
            nvidia-all) 
                echo -e "${BLUE}üîß Opening Nvidia-TKG configuration...${RESET}"
                nano ~/.config/frogminer/nvidia-all.cfg
                echo -e "${GREEN}‚úÖ Configuration saved!${RESET}"
                sleep 1
                ;;
            mesa-git)   
                echo -e "${BLUE}üîß Opening Mesa-TKG configuration...${RESET}"
                nano ~/.config/frogminer/mesa-git.cfg
                echo -e "${GREEN}‚úÖ Configuration saved!${RESET}"
                sleep 1
                ;;
            wine-tkg)   
                echo -e "${BLUE}üîß Opening Wine-TKG configuration...${RESET}"
                nano ~/.config/frogminer/wine-tkg.cfg
                echo -e "${GREEN}‚úÖ Configuration saved!${RESET}"
                sleep 1
                ;;
            back)       
                return 0
                ;;
            *)          
                echo -e "${RED}${BOLD}‚ùå Invalid option: $config_file${RESET}"
                ;;
        esac
    done
}

# üìã Actions per selection
_linux_promt()         { echo -e "${GREEN}${BREAKOPT} üß† Installing Linux-tkg  üöÄ üöÄ üöÄ ‚è≥ ‚è≥ ‚è≥${BREAKOPT}${RESET}"; _linux_install; }
_nvidia_promt()        { echo -e "${GREEN}${BREAKOPT} üéÆ Installing Nvidia-tkg  üöÄ üöÄ üöÄ ‚è≥ ‚è≥ ‚è≥${BREAKOPT}${RESET}"; _nvidia_install; }
_linuxnvidia_promt()   { _linux_promt; _nvidia_promt; }
_mesa_promt()          { echo -e "${GREEN}${BREAKOPT} üß© Installing Mesa-tkg  üöÄ üöÄ üöÄ ‚è≥ ‚è≥ ‚è≥${BREAKOPT}${RESET}"; _mesa_install; }
_wine_promt()          { echo -e "${GREEN}${BREAKOPT} üç∑ Installing Wine-tkg  üöÄ üöÄ üöÄ ‚è≥ ‚è≥ ‚è≥${BREAKOPT}${RESET}"; _wine_install; }
_proton_promt()        { echo -e "${GREEN}${BREAKOPT} üß™ Installing Proton-tkg  üöÄ üöÄ üöÄ ‚è≥ ‚è≥ ‚è≥${BREAKOPT}${RESET}"; _proton_install; }
_config_promt()        { echo -e "${GREEN}${BREAKOPT} ‚öôÔ∏è Opening Configuration Editor${BREAKOPT}${RESET}"; _config_edit; if [ $? -eq 0 ]; then return 0; fi; }

# ‚úÖ Completion display
_show_done() {
    local status=$?
    echo -e "${BREAKOPT}"
    echo -e "${BOLD} üìù Action completed: $(date '+%Y-%m-%d %H:%M:%S')${RESET}"
    if [ $status -eq 0 ]; then
        echo -e "${GREEN} ‚úÖ Status: Successful${RESET}"
    else
        echo -e "${RED}${BOLD} ‚ùå Status: Error (Code: $status)${RESET}"
    fi
    echo -e "${BREAKOPT}"
}

# üéõÔ∏è Menu with preview
_menu() {
    local auswahl
    auswahl=$(
        printf "%b\n" \
            "Linux          |üß† Linux-TKG        ‚Äì Linux Kernel TKG configuration" \
            "Nvidia         |üéÆ Nvidia-TKG       ‚Äì Nvidia Open-Source or proprietary graphics driver" \
            "Linux+Nvidia   |üíª Linux+Nvidia     - Combo package: Linux-TKG + Nvidia-TKG" \
            "Mesa           |üß© Mesa-TKG         ‚Äì Mesa Open-Source graphics driver for AMD and Intel" \
            "Wine           |üç∑ Wine-TKG         ‚Äì Windows compatibility layer" \
            "Proton         |üß™ Proton-TKG       ‚Äì Windows compatibility layer for Steam / Gaming" \
            "Config         |‚öôÔ∏è Config-TKG       ‚Äì Edit TKG configuration files" \
            "Clean          |üßπ Reset" \
            "Exit           |‚ùå Exit" \
            | fzf --prompt="‚ùØ Choose an option: " \
                  --header="üéõÔ∏è TKG Frogminer Installation ‚Äì Select a package ..." \
                  --height="31" \
                  --border \
                  --ansi \
                  --delimiter="|" \
                  --with-nth="2" \
                  --preview="bash -c \"
                             key=\$(echo {} | cut -d'|' -f1 | xargs)
                             SCRIPT_DIR='$SCRIPT_DIR'
                             case \\\$key in
                             Wine)              cat \\\"\\\$SCRIPT_DIR/.config/preview/wine.txt\\\" ;;
                             Proton)            cat \\\"\\\$SCRIPT_DIR/.config/preview/proton.txt\\\" ;;
                             Mesa)              cat \\\"\\\$SCRIPT_DIR/.config/preview/mesa.txt\\\" ;;
                             Nvidia)            cat \\\"\\\$SCRIPT_DIR/.config/preview/nvidia.txt\\\" ;;
                             Linux)             cat \\\"\\\$SCRIPT_DIR/.config/preview/kernel.txt\\\" ;;
                             Linux+Nvidia)      cat \\\"\\\$SCRIPT_DIR/.config/preview/linux.txt\\\" ;;
                             Config)            cat \\\"\\\$SCRIPT_DIR/.config/preview/config.txt\\\" ;;
                             Clean)             cat \\\"\\\$SCRIPT_DIR/.config/preview/clean.txt\\\" ;;
                             Exit)              echo \\\"üëã Goodbye!\\\" ;;
                             esac
                            \"" \
                  --preview-window="down:wrap:15" \
                  --color="header:italic:underline,prompt:italic:green,pointer:green,marker:red" \
                  --pointer="‚û§ "
    )

    # On ESC or cancel
    if [[ -z "$auswahl" ]]; then
        echo -e " ${RED}${BOLD}‚ùå Selection cancelled.${RESET}"
        _on_exit
    fi

    # Save selection
    echo "$auswahl" | cut -d"|" -f1 | xargs > /tmp/check_tkg
}

# ‚ñ∂Ô∏è Main function
_main() {
    _pre
    clear
    _menu

    choice=$(< /tmp/check_tkg)
    rm -f /tmp/check_tkg

    case $choice in
        Linux+Nvidia)  _linuxnvidia_promt ;;
        Linux)         _linux_promt ;;
        Nvidia)        _nvidia_promt ;;
        Mesa)          _mesa_promt ;;
        Wine)          _wine_promt ;;
        Proton)        _proton_promt ;;
        Config)        _config_promt; if [ $? -eq 0 ]; then rm -f "$LOCKFILE"; exec "$0"; fi ;;
        Clean)         _pre; sleep 1; echo -e "${BLUE} üîÅ Restarting üê∏ TKG Installer ...${RESET}"; sleep 1; rm -f "$LOCKFILE"; exec "$0" ;;
        Exit)          echo -e "${BLUE} üëã Goodbye!${RESET}"; exit 0 ;;
        *)             echo -e "${GREEN}${BOLD} ‚ùå Invalid option: $choice${RESET}" ;;
    esac

    _show_done
}

_main
